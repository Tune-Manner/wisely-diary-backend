# 워크플로우 이름 설정
name: CD with Gradle and AWS EC2

# 워크플로우 트리거 설정
on:
  push:
    branches: [ "main", "dev", "setup/github-actions" ]  # 이 브랜치들에 push가 발생하면 워크플로우 실행

# 작업 정의
jobs:
  deploy:
    runs-on: ubuntu-latest  # 최신 Ubuntu 환경에서 실행
    steps:

      # 1. 코드 체크아웃
      - uses: actions/checkout@v4  # 현재 레포지토리의 코드를 가져옴

      # 2. JDK 설정
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'  # Java 17 버전 사용
          distribution: 'corretto'  # Amazon Corretto 배포판 사용
          cache: 'gradle'  # Gradle 캐시 사용으로 빌드 속도 향상

      # 3. Gradle 실행 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew  # gradlew 스크립트에 실행 권한 부여

      # 4. application.yml 파일 생성
      - name: Create application.yml
        run: |
          mkdir -p src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" | base64 --decode > src/main/resources/application.yml
        # GitHub Secrets에 저장된 base64 인코딩된 application.yml 내용을 디코딩하여 파일 생성

      # 5. Gradle 빌드 실행
      - name: Gradle 빌드
        run: ./gradlew clean build -i
        env:
          # 빌드 시 필요한 환경 변수들을 GitHub Secrets에서 가져와 설정
          SPRING_DATASOURCE_URL: ${{ secrets.DB_URL }}
          SPRING_DATASOURCE_USERNAME: ${{ secrets.DB_USERNAME }}
          SPRING_DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}
          SPRING_AI_OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          SPRING_AI_OPENAI_CHAT_MODEL: ${{ secrets.SPRING_AI_OPENAI_CHAT_MODEL }}
          SPRING_AI_OPENAI_IMAGE_SIZE: ${{ secrets.SPRING_AI_OPENAI_IMAGE_SIZE }}
          SPRING_AI_OPENAI_IMAGE_MODEL: ${{ secrets.SPRING_AI_OPENAI_IMAGE_MODEL }}
          SPRING_AI_OPENAI_IMAGE_QUALITY: ${{ secrets.SPRING_AI_OPENAI_IMAGE_QUALITY }}
          SPRING_AI_OPENAI_AUDIO_MODEL: ${{ secrets.SPRING_AI_OPENAI_AUDIO_MODEL }}
          OPENAI_BASE_URL: ${{ secrets.OPENAI_BASE_URL }}
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_KEY: ${{ secrets.SUPABASE_KEY }}
          SUPABASE_BUCKET: ${{ secrets.SUPABASE_BUCKET }}
          AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
          AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
          AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
          AWS_S3_ENDPOINT: ${{ secrets.AWS_S3_ENDPOINT }}
          SPRING_AI_OPENAI_URLS_CREATE_TRANSCRIPTION_URL: ${{ secrets.SPRING_AI_OPENAI_URLS_CREATE_TRANSCRIPTION_URL }}
          SUNO_API_TOKEN: ${{ secrets.SUNO_API_TOKEN }}

      # 6. 현재 시간 가져오기 (배포 시간 기록용)
      - name: 현재 시간 가져오기
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYY-MM-DDTHH-mm-ss
          utcOffset: "+09:00"  # 한국 시간 (UTC+9) 설정

      # 7. 현재 시간 출력 (로그 확인용)
      - name: 현재 시간 출력
        run: echo "현재 시간=${{steps.current-time.outputs.formattedTime}}"
        shell: bash

      # 8. EC2에 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}  # EC2 접속용 비밀키
          HOST: ${{ secrets.EC2_HOST }}  # EC2 호스트 주소
          USER: ${{ secrets.EC2_USER }}  # EC2 접속 사용자 이름
        run: |
          set -e  # 스크립트 실행 중 오류 발생 시 즉시 중단
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key  # 비밀키 파일 생성 및 권한 설정
          
          # JAR 파일과 application.yml 파일을 EC2로 전송
          scp -i private_key -o StrictHostKeyChecking=no build/libs/WiselyDiaryBackend-0.0.1-SNAPSHOT.jar ${USER}@${HOST}:~/application.jar
          scp -i private_key -o StrictHostKeyChecking=no src/main/resources/application.yml ${USER}@${HOST}:~/application.yml
          
          # EC2에 SSH 접속하여 애플리케이션 배포 및 실행
          ssh -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST} '
            sudo systemctl stop wisely-diary.service || true
            sudo mv ~/application.jar /opt/wisely-diary/
            sudo mv ~/application.yml /opt/wisely-diary/
          
            # 기존 Java 애플리케이션 중지
            sudo systemctl stop wisely-diary.service || true
          
            # 새 JAR 파일을 지정된 디렉토리로 이동
            sudo mv ~/application.jar /opt/wisely-diary/
          
            # systemd 서비스 파일 생성/업데이트
            echo "[Unit]
            Description=Wisely Diary Application
            After=network.target
          
            [Service]
            ExecStart=/usr/bin/java -jar /opt/wisely-diary/application.jar
            User=$USER
            # 애플리케이션 실행에 필요한 환경 변수 설정
            Environment=\"SPRING_DATASOURCE_URL=${{ secrets.DB_URL }}\"
            Environment=\"SPRING_DATASOURCE_USERNAME=${{ secrets.DB_USERNAME }}\"
            Environment=\"SPRING_DATASOURCE_PASSWORD=${{ secrets.DB_PASSWORD }}\"
            Environment=\"SPRING_AI_OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}\"
            Environment=\"SPRING_AI_OPENAI_CHAT_MODEL=${{ secrets.SPRING_AI_OPENAI_CHAT_MODEL }}\"
            Environment=\"SPRING_AI_OPENAI_IMAGE_SIZE=${{ secrets.SPRING_AI_OPENAI_IMAGE_SIZE }}\"
            Environment=\"SPRING_AI_OPENAI_IMAGE_MODEL=${{ secrets.SPRING_AI_OPENAI_IMAGE_MODEL }}\"
            Environment=\"SPRING_AI_OPENAI_IMAGE_QUALITY=${{ secrets.SPRING_AI_OPENAI_IMAGE_QUALITY }}\"
            Environment=\"SPRING_AI_OPENAI_AUDIO_MODEL=${{ secrets.SPRING_AI_OPENAI_AUDIO_MODEL }}\"
            Environment=\"OPENAI_BASE_URL=${{ secrets.OPENAI_BASE_URL }}\"
            Environment=\"SUPABASE_URL=${{ secrets.SUPABASE_URL }}\"
            Environment=\"SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}\"
            Environment=\"SUPABASE_BUCKET=${{ secrets.SUPABASE_BUCKET }}\"
            Environment=\"AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}\"
            Environment=\"AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}\"
            Environment=\"AWS_S3_BUCKET=${{ secrets.AWS_S3_BUCKET }}\"
            Environment=\"AWS_S3_REGION=${{ secrets.AWS_S3_REGION }}\"
            Environment=\"AWS_S3_ENDPOINT=${{ secrets.AWS_S3_ENDPOINT }}\"
            Environment=\"APP_CARTOON_IMAGE_PATH=${{ secrets.APP_CARTOON_IMAGE_PATH }}\"
            Environment=\"FILE_UPLOAD_MAX_FILE_SIZE=${{ secrets.FILE_UPLOAD_MAX_FILE_SIZE }}\"
            Environment=\"FILE_UPLOAD_MAX_REQUEST_SIZE=${{ secrets.FILE_UPLOAD_MAX_REQUEST_SIZE }}\"
            Environment=\"SPRING_AI_OPENAI_URLS_CREATE_TRANSCRIPTION_URL=${{ secrets.SPRING_AI_OPENAI_URLS_CREATE_TRANSCRIPTION_URL }}\"
            Environment=\"SUNO_API_TOKEN=${{ secrets.SUNO_API_TOKEN }}\"
          
            [Install]
            WantedBy=multi-user.target" | sudo tee /etc/systemd/system/wisely-diary.service
          
            # systemd 데몬 리로드 및 서비스 시작
            sudo systemctl daemon-reload
            sudo systemctl start wisely-diary.service
            sudo systemctl enable wisely-diary.service  # 시스템 부팅 시 자동 시작 설정
          
            # 배포 후 서비스 상태 및 로그 저장
            sudo systemctl status wisely-diary.service > ~/deploy_status.log
            sudo journalctl -u wisely-diary.service -n 50 > ~/deploy_log.log
          '

      # 9. 배포 로그 가져오기
      - name: Fetch deployment logs
        if: always()  # 이전 단계의 성공 여부와 관계없이 항상 실행
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ${{ secrets.EC2_USER }}
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          # EC2에서 배포 로그 파일들을 로컬로 복사
          scp -i private_key -o StrictHostKeyChecking=no ${USER}@${HOST}:~/deploy_*.log ./

      # 10. 배포 로그 아티팩트로 업로드
      - name: Upload deployment logs
        if: always()  # 이전 단계의 성공 여부와 관계없이 항상 실행
        uses: actions/upload-artifact@v3
        with:
          name: deployment-logs
          path: deploy_*.log  # 모든 배포 관련 로그 파일을 아티팩트로 업로드